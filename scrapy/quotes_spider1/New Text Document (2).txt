XPath (XML Path Language):

Definition: XPath is a query language for selecting nodes from an XML or HTML document.
Use case: Commonly used in web scraping, automation (like Selenium), and XML parsing.
Syntax: Looks like a file path.

Types:
	Absolute XPath: Starts from the root (/html/body/div/...)
	Relative XPath: Starts from anywhere (//div[@class='example'])

Example: //div[@id="main"]/ul/li[1]
Selects the first <li> inside <ul> within <div id="main">.
Use XPath when you need complex queries (like selecting elements by text content or moving up the DOM).
---------------------------------------------------------------------------
CSS Selectors (Cascading Style Sheets Selectors)

Definition: A way to select HTML elements based on their id, class, type, attributes, etc.
Use case: Widely used in frontend web development (styling) and also in web scraping/automation (like Selenium, BeautifulSoup).
Syntax: Looks like CSS styling rules.
Example: #main ul li:first-child
Selects the first <li> inside <ul> within the element with id="main".
Use CSS Selectors when you want simple, fast, and styling-like element selection.
-----------------------------------------------------------------------------

Suppose we have this HTML snippet:

<html>
  <body>
    <div id="container">
      <ul class="menu">
        <li class="item">Home</li>
        <li class="item active">About</li>
        <li class="item">Contact</li>
      </ul>
    </div>
  </body>
</html>

Goal: Select the <li> element with text "About"
----------------------------------------------

Using XPath:

1. By class attribute: //li[@class="item active"]
2. By text content: //li[text()="About"]
3. By position: //ul[@class="menu"]/li[2]

Using CSS Selector:

1. By class attribute: li.item.active
2. By position: ul.menu li:nth-child(2)

Note: CSS cannot directly select by text content ("About") â€” thatâ€™s why XPath is stronger in such cases.

---------------------------------------------------
Key Differences

Feature               | XPath                                | CSS Selectors
----------------------|--------------------------------------|-----------------------------
Scope                 | Works with XML + HTML                | Works only with HTML
Syntax Style          | Path-like (//div[@class="x"])        | CSS-like (div.x or #id)
Direction             | Can navigate up & down DOM           | Can only move downward
Select by Text        | Supported (//tag[text()="value"])    | Not supported
Functions             | Supports functions (contains(), etc.)| Limited functions
Attribute Selection   | @attribute syntax                   | [attribute="value"] syntax
Indexing              | Supports indexing (//li[2])          | Supports nth-child (li:nth-child(2))
Performance           | Generally slower in browsers         | Faster in browsers
Learning Curve        | Steeper, more complex                | Easier, similar to CSS styling
Use Case              | Complex queries, text search         | Simple, fast element selection

-------------------------------------------------------------------------------------------------------